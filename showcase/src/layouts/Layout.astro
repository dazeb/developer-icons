---
import Container from "@/components/Container.astro";
import Navbar from "@/components/Navbar.astro";
import { publicBaseUrl } from "@/config";
import "@fontsource-variable/noto-sans";
import "../styles/globals.css";
import { TooltipProvider } from "@/components/ui/tooltip";

interface Props {
  title: string;
  description?: string;
}

const {
  title,
  description = "An open-source collection of optimized and customizable SVG icons for popular technologies, frameworks, and tools used by developers. Free, scalable, and easy to use.",
} = Astro.props;
const measurementId = import.meta.env.PUBLIC_GA_MEASUREMENT_ID;
const currentUrl = new URL(Astro.url);
const fullUrl = `${currentUrl.origin}${currentUrl.pathname}`;
---

<!doctype html>
<html lang="en" class="light">
  <head>
    <meta charset="UTF-8" />
    <title>{title}</title>
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta
      name="keywords"
      content="developer icons, tech stack icons, SVG icons, programming icons, technology icons, framework icons, developer tools, open source, React icons, JavaScript icons, TypeScript icons, web development, frontend development, backend development, programming languages, databases, cloud services, design tools, development tools, webdev resources, free icon library, high quality icons"
      ,
    />
    <link rel="canonical" href={fullUrl} />
    <meta name="author" content="Sandesh Katwal (xandemon)" />
    <link
      rel="icon"
      type="image/svg+xml"
      href={`${publicBaseUrl}/favicon.svg`}
    />
    <link rel="sitemap" href={`${publicBaseUrl}/sitemap-index.xml`} />

    <meta property="og:type" content="website" />
    <meta property="og:url" content={fullUrl} />
    <meta property="og:title" content={`${title} | Created by xandemon`} />
    <meta property="og:description" content={description} />
    <meta
      property="og:site_name"
      content="Developer Icons | Created by xandemon"
    />
    <meta property="og:image" content={`${publicBaseUrl}/preview.png`} />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta
      property="og:image:alt"
      content="Developer Icons—Beautiful tech stack icon library for developers"
    />
    <meta property="og:locale" content="en_US" />

    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:url" content={fullUrl} />
    <meta name="twitter:title" content={`${title} | Created by xandemon`} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={`${publicBaseUrl}/preview.png`} />
    <meta
      name="twitter:image:alt"
      content="Developer Icons—Beautiful tech stack icon library for developers"
    />
    <meta name="twitter:site" content="@xandemon" />
    <meta name="twitter:creator" content="@xandemon" />

    <meta name="robots" content="index, follow" />
    <!-- <meta name="theme-color" content="#3b82f6" />
    <meta name="msapplication-TileColor" content="#3b82f6" /> -->

    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />

    <link rel="dns-prefetch" href="//www.googletagmanager.com" />
    <link rel="dns-prefetch" href="//www.google-analytics.com" />

    <script is:inline>
      const theme = (() => {
        if (
          typeof localStorage !== "undefined" &&
          localStorage.getItem("theme")
        ) {
          return localStorage.getItem("theme");
        }
        if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
          return "dark";
        }
        return "light";
      })();
      document.documentElement.classList.add(theme);
    </script>

    <script
      type="text/partytown"
      src={`https://www.googletagmanager.com/gtag/js?id=${measurementId}`}
    ></script>
    <script type="text/partytown" define:vars={{ measurementId }}>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function gtag() {
        dataLayer.push(arguments);
      };
      gtag("js", new Date());
      gtag("config", measurementId);
    </script>
  </head>
  <body class="text-zinc-700 dark:text-zinc-300 bg-zinc-100 dark:bg-zinc-900">
    <TooltipProvider delayDuration={100}>
      <Navbar />
      <Container className="items-start lg:h-[calc(100vh-70px)]">
        <slot />
      </Container>
    </TooltipProvider>
  </body>
</html>
